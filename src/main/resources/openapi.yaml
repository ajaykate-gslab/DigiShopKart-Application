openapi: 3.0.1
info:
  title: DigiShopKart
  description: Apis of E-commerce application
  contact:
    name: Ajay Kate
    url: http://digishopkart.com
  version: '0.1'
servers:
  - url: http://localhost:8080
#------------------------------PATHS ---------------------------------
paths:
  /addCustomer:
    description: create customer
    post:
      summary: inserting customer records
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        200:
          description: sucess response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
        400:
          $ref: '#/components/responses/BadRequest'

  /fetchCustomerById:
    get:
      description: fetch customer by id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /deleteCustomerById:
    delete:
      description: api to delete the customer
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /updateCustomerById:
    patch:
      description: update Customer by using Customer_id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /fetchAllCustomers:
    description: Fetching all Customers records
    get:
      description: all customer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  #   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  /insertProduct:
    description: create Product
    post:
      summary: inserting Product records
      requestBody:
        $ref: '#/components/requestBodies/ProductBody'
      responses:
        200:
          description: sucess response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          $ref: '#/components/responses/NotFound'
        400:
          $ref: '#/components/responses/BadRequest'
  /fetchProductById:
    get:
      description: fetch Product by id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /fetchAllProducts:
    description: Fetching all Products record
    get:
      description: all Products
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  #   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  /createDiscountCoupon:
    description: Api to create discount coupon
    post:
      description: create Discount
      requestBody:
        $ref: '#/components/requestBodies/DiscountBody'
      responses:
        200:
          description: sucess response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        404:
          $ref: '#/components/responses/NotFound'
        400:
          $ref: '#/components/responses/BadRequest'

  /fetchDiscountCouponById:
    description: APi to fetch Discount Coupon by Id
    get:
      description: getById api
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: sucess response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        404:
          $ref: '#/components/responses/NotFound'
        400:
          $ref: '#/components/responses/BadRequest'

  /fetchAllDiscountCoupons:
    get:
      description: Api to fetch All the Discount coupons
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Discount'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /updateDiscountCouponById:
    patch:
      description: Api to update Discount Coupons recors
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/DiscountBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /deleteDiscountCouponById:
    delete:
      description: Api to delete Discount Coupon By id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
  #   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  /createSubscription:
    post:
      description: Api to create Subscription by using Customer, Product, Discount
      requestBody:
        $ref: '#/components/requestBodies/SubscriptionBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subacription'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /fetchSubscriptionById:
    get:
      description: Api to fetch sunscription by id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subacription'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /fetchAllSubscriptions:
    get:
      description: APi to get All the sunscriptions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subacription'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /deleteSubscriptionById:
    delete:
      description: Api to delete the subscription by id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subacription'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /updateSubscriptionById:
    patch:
      description: Api to update subscription record by id
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/SubscriptionBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subacription'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'
  #   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .


#___________________RRESPONSES
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  #___________________REQUEST BODY_____________________________________

  requestBodies:

    SubscriptionBody:
      description: A JSON object Contenting Subacription information.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subacription'

    DiscountBody:
      description: A JSON object Contenting Discount information.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Discount'

    CustomerBody:
      description: A JSON object Contenting Customer and CustomerAddress information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'

    ProductBody:
      description: A JSON object Contenting Product and variant information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'


  #___________________SCHEMAS
  schemas:
    Errors:
      type: object
      properties:
        code:
          type: string
        message:
          title: string
      required:
        - code
        - message

    Customer:
      type: object
      required:
        - firstName
        - lastName
        - email
        - mobile
        - customerStatus
        - customerAddress
      properties:
        customerId:
          type: integer
        firstName:
          type: string
          example: Ajay
          pattern: '^[a-zA-Z]+(\s[a-zA-Z]+)?$'
        lastName:
          type: string
          example: Kate
          pattern: '^[a-zA-Z]+(\s[a-zA-Z]+)?$'
        email:
          type: string
          example: ajaykate@gmail.com
          format: email
        mobile:
          type: string
          example: +919876543210
        customerStatus:
          type: string
          enum:
            - active
            - inactive
          default: active
          nullable: false
        customerAddress:
          $ref: '#/components/schemas/CustomerAddress'

    Product:
      type: object
      required:
        - productName
        - createdAt
        - productCode
        - productPrice
        - productStatus
        - productCategory
      properties:
        productId:
          type: integer
        productName:
          type: string
        productCode:
          type: string
        productPrice:
          type: number
          minimum: 1
          format: double
        productCategory:
          type: string
          enum:
            - electronics
            - cloths
            - footwares
            - jwelleries
            - gadgets
        productStatus:
          type: string
          enum:
            - active
            - inactive
        variant:
          $ref: '#/components/schemas/Variant'

    Variant:
      type: object
      required:
        - colour
        - size
      properties:
        variant_id:
          type: integer
        colour:
          type: string
        size:
          type: string

    CustomerAddress:
      type: object
      required:
        - customerFullName
        - country
        - state
        - town
        - area
        - houseOrBuilding
        - landmark
        - pinCode
        - mobile
      properties:
        customerAddressId:
          type: integer
        customerFullName:
          type: string
        country:
          type: string
        state:
          type: string
        town:
          type: string
        area:
          type: string
        houseOrBuilding:
          type: string
        landmark:
          type: string
        pinCode:
          type: number
          format: long
        mobile:
          type: string
    Discount:
      type: object
      required:
        - discountId
        - discountType
        - value
      properties:
        discountId:
          type: integer
        couponName:
          type: string
        discountType:
          type: string
          enum:
            - FLAT
            - PERCENTAGE
        value:
          type: number
          format: double
    Subacription:
      type: object
      properties:
        subscriptionId:
          type: integer
        activatedAt:
          type: string
          format: date-time
          example: '1955-04-23T13:22:52.685Z'
        status:
          type: string
          enum: [active, inactive]
        customer:
          $ref: '#/components/schemas/Customer'
        product:
          $ref: '#/components/schemas/Product'
        discount:
          $ref: '#/components/schemas/Discount'

    #---------------------------------------------------------------------------